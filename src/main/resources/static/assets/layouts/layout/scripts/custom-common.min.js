/**
* 配置调用后台接口的路径
* @param str API路径
* @return string
* @example configAPIUrl("/api/v2/user");
*/

function configAPIUrl(str) {
	return "/"+str	
}

/**
* 判定字符串是否为null或者empty
* @param str 待判断的string
* @return boolean
* @example stringIsNullOrEmpty("123");
*/

function stringIsNullOrEmpty(str) {
	if(str === null || str === '' || typeof(str) === typeof(undefined)){
		return true;
	}else{
		return false;
	}
}

/**
* 判定对象是否为null或者empty
* @param obj 待判断的对象
* @return boolean
* @example objectIsNullOrEmpty(dom);
*/

function objectIsNullOrEmpty(obj) {
	if(obj === null || typeof(obj) === typeof(undefined)){
		return true;
	}else{
		return false;
	}
}

/**
* 前台获取URL中的GET参数
* @param name URL参数名
* @return string
* @example getUrlParam("business_type");
*/
function getUrlParam(name) {
	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); //构造一个含有目标参数的正则表达式对象
	var r = window.location.search.substr(1).match(reg); //匹配目标参数
	if (r != null)
		return unescape(r[2]);
	return null; //返回参数值
}

/**
* 获取日期的时间戳
* @param date 日期 
* @return int
* @example getTimestamp("2014-03-14")
*/
function getTimestamp(date) {

	if (date === null || date === undefined) {
		return Math.round(new Date().getTime() / 1000);
	} else {
		return Math.round(new Date(date).getTime() / 1000);
	}

}

/**
* 获取Json数组列的数量
* @param jsonArray Json数组 
* @return int
* @example getJsonArrayColumnCount(jsonArray)
*/
function getJsonArrayColumnCount(jsonArray) {
	var headArray = [];
	for (var i in jsonArray[0]) {
		headArray[headArray.length] = i;
	}
	return headArray.length;
}

/**
* 检验用户密码强度
* @param pwd 密码
* @return int
* @example getTimestamp("2014-08-27")
*/
function CheckIntensity(pwd) {
	var m = 0;
	var Modes = 0;
	for (i = 0; i < pwd.length; i++) {
		var charType = 0;
		var t = pwd.charCodeAt(i);
		if (t >= 48 && t <= 57) { charType = 1; }
		else if (t >= 65 && t <= 90) { charType = 2; }
		else if (t >= 97 && t <= 122) { charType = 4; }
		else { charType = 4; }
		Modes |= charType;
	}
	for (i = 0; i < 4; i++) {
		if (Modes & 1) { m++; }
		Modes >>>= 1;
	}
	if (pwd.length <= 5) { m = 1; }
	
	switch (m) {
		case 1:
			return 1; // 如果输入的密码位数不足6位，那么就判定为弱。如果输入的密码只由数字、小写字母、大写字母或其它特殊符号当中的一种组成，则判定为弱。
			break;
		case 2:
			return 2; // 如果密码由数字、小写字母、大写字母或其它特殊符号当中的两种组成，则判定为中。
			break;
		case 3:
			return 3; // 如果密码由数字、小写字母、大写字母或其它特殊符号当中的三种以上组成，则判定为强。
			break;
		default:
			return 1;
			break;
	}
} 

/**
* Ajax返回结果判断及回调
* @param response 返回结果
* @param fn 回调函数
* @return void
* @example automaticComputingCheckInventoryDate()
*/
function ajaxCallback(response,fn){
	if(response.code==200){
		fn(response);
	}else if(response.code==400){
		stringIsNullOrEmpty(response.msg)?bootbox.alert("请求的参数不全或格式有问题。"):bootbox.alert(response.msg);
		return
	}else if(response.code==401){
		stringIsNullOrEmpty(response.msg)?bootbox.alert("请求的权限不具备。"):bootbox.alert(response.msg);
		return				  
	}else if(response.code==404){
		stringIsNullOrEmpty(response.msg)?bootbox.alert("请求的数据不存在。"):bootbox.alert(response.msg);
		return				  
	}else if(response.code==412){
		stringIsNullOrEmpty(response.msg)?bootbox.alert("请求的执行被前置条件限制。"):bootbox.alert(response.msg);
		return				  
	}else if(response.code==500){
		stringIsNullOrEmpty(response.msg)?bootbox.alert("请求的服务器程序运行不正确。"):bootbox.alert(response.msg);
		return
	}else{
		stringIsNullOrEmpty(response.msg)?bootbox.alert("未知的返回值。"):bootbox.alert(response.msg);
		return
	}
}



/**
* Ajax获取表格数据
* @param dom 事件前后要操作的对象
* @param url url地址
* @param data 更新的数据
* @param authority 是否需要验证权限
* @param fn 回调函数
* @return void
* @example ajaxToIndex(dom,"/v2/Ajax",type,data,true,function(){})
*/
function ajaxToIndex(dom,url,type,data,authority,fn,asynchronous=true){

	$.ajax({
		type: "GET",
		url: url,
		data:{
			type:type,
			data:JSON.stringify(data),
			authority: JSON.stringify({"authority":authority,"infomation":{"useruuid":$.cookie('USERUUID'),"authorityuuid":$.cookie('SELECTED_AUTHORITY_UUID'),"token":$.cookie('TOKEN')}})
		},
		async:asynchronous,
		beforeSend: function(){
			if(objectIsNullOrEmpty(dom)){
				return;
			}else if(!objectIsNullOrEmpty(dom.blockDom)){
				App.blockUI({
					target: dom.blockDom,
					animate: true
				});
			}else if(!objectIsNullOrEmpty(dom.disabledDom)){
				$(dom.disabledDom).attr('disabled',true);
			}
		},
		complete: function(){
			if(objectIsNullOrEmpty(dom)){			
				return;
			}else if(!objectIsNullOrEmpty(dom.blockDom)){				
				App.unblockUI(dom.blockDom);	
			}else if(!objectIsNullOrEmpty(dom.disabledDom)){
				$(dom.disabledDom).attr('disabled',false);
			}					
		},			
		success:function(response){	
			ajaxCallback(response,function(response){		
				fn(response);
			});				
		},			
		error:function(){
			bootbox.alert("请求错误");
		}
	});
}

/**
* Ajax提交更新数据
* @param that 事件前后要操作的对象
* @param url url地址
* @param data 更新的数据
* @param authority 是否需要验证权限
* @param fn 回调函数
* @return void
* @example ajaxToUpdate(dom,"/v2/Ajax",type,data,true,function(){})
*/
function ajaxToUpdate(dom,url,type,data,authority,fn,asynchronous=true){		

	$.ajax({
		type: "PUT",
		url: url,	
		data:{
			type:type,
			data:JSON.stringify(data),
			authority: JSON.stringify({"authority":authority,"infomation":{"useruuid":$.cookie('USERUUID'),"authorityuuid":$.cookie('SELECTED_AUTHORITY_UUID'),"token":$.cookie('TOKEN')}})
		},		
		async:asynchronous,
		beforeSend: function(){
			if(objectIsNullOrEmpty(dom)){
				return;
			}else if(!objectIsNullOrEmpty(dom.blockDom)){
				App.blockUI({
					target: dom.blockDom,
					animate: true
				});
			}else if(!objectIsNullOrEmpty(dom.disabledDom)){
				$(dom.disabledDom).attr('disabled',true);
			}
		},
		complete: function(){
			if(objectIsNullOrEmpty(dom)){			
				return;
			}else if(!objectIsNullOrEmpty(dom.blockDom)){				
				App.unblockUI(dom.blockDom);	
			}else if(!objectIsNullOrEmpty(dom.disabledDom)){
				$(dom.disabledDom).attr('disabled',false);
			}					
		},		
		success:function(response){
			ajaxCallback(response,function(response){		
				fn(response);
			});							
		},			
		error:function(){
			bootbox.alert("请求错误");
		}
	});
}	


/**
* Ajax读取数据
* @param that 事件前后要操作的对象
* @param url url地址
* @param data 更新的数据
* @param authority 是否需要验证权限
* @param fn 回调函数
* @return void
* @example ajaxToRead(dom,"/v2/Ajax",type,data,true,function(){})
*/
function ajaxToRead(dom,url,type,data,authority,fn,asynchronous=true){		

	$.ajax({
		type: "GET",
		url: url,		
		data:{
			type:type,
			data:JSON.stringify(data),
			authority: JSON.stringify({"authority":authority,"infomation":{"useruuid":$.cookie('USERUUID'),"authorityuuid":$.cookie('SELECTED_AUTHORITY_UUID'),"token":$.cookie('TOKEN')}})
		},
		async:asynchronous,
		beforeSend: function(){
			if(objectIsNullOrEmpty(dom)){
				return;
			}else if(!objectIsNullOrEmpty(dom.blockDom)){
				App.blockUI({
					target: dom.blockDom,
					animate: true
				});
			}else if(!objectIsNullOrEmpty(dom.disabledDom)){
				$(dom.disabledDom).attr('disabled',true);
			}
		},
		complete: function(){
			if(objectIsNullOrEmpty(dom)){			
				return;
			}else if(!objectIsNullOrEmpty(dom.blockDom)){				
				App.unblockUI(dom.blockDom);	
			}else if(!objectIsNullOrEmpty(dom.disabledDom)){
				$(dom.disabledDom).attr('disabled',false);
			}					
		},		
		success:function(response){

			ajaxCallback(response,function(response){
				fn(response);				
			});

		},			
		error:function(){
			bootbox.alert("请求错误");
		}
	});
}

/**
* 保存图片
* @param imgName <input type="hidden" name="imgName">
* @param imgPosition 存储到服务器的文件夹
* @param name <input type="file" class="name">
* @return void
*/
function saveImage(dom, imgName, imgPosition, name){
	var formData = new FormData();

	formData.append('file', $('.' + name)[0].files[0]);
	formData.append("dir", imgPosition);

	ajaxToSaveFile(dom,configAPIUrl("restful/common/uploadImg"),null,formData,true,function(response){
		$("input[name='"+ imgName +"']").val(response.data.file_path);
	},false);
}

/**
* Ajax提交更新数据
* @param that 事件前后要操作的对象
* @param url url地址
* @param data 更新的数据
* @param authority 是否需要验证权限
* @param fn 回调函数
* @return void
* @example ajaxToSaveFile(dom,"/v2/Ajax",type,data,true,function(){})
*/
function ajaxToSaveFile(dom,url,type,data,authority,fn,asynchronous=true){		

	$.ajax({
		type: "POST",
		url: url,
		cache: false,		
		data:data,
	    processData: false,
	    contentType: false,
		async:asynchronous,
		beforeSend: function(){
			if(objectIsNullOrEmpty(dom)){
				return;
			}else if(!objectIsNullOrEmpty(dom.blockDom)){
				App.blockUI({
					target: dom.blockDom,
					animate: true
				});
			}else if(!objectIsNullOrEmpty(dom.disabledDom)){
				$(dom.disabledDom).attr('disabled',true);
			}
		},
		complete: function(){
			if(objectIsNullOrEmpty(dom)){			
				return;
			}else if(!objectIsNullOrEmpty(dom.blockDom)){				
				App.unblockUI(dom.blockDom);	
			}else if(!objectIsNullOrEmpty(dom.disabledDom)){
				$(dom.disabledDom).attr('disabled',false);
			}					
		},		
		success:function(response){
			ajaxCallback(response,function(response){		
				fn(response);
			});							
		},			
		error:function(){
			bootbox.alert("请求错误");
		}
	});
}



/**
* Ajax提交更新数据
* @param that 事件前后要操作的对象
* @param url url地址
* @param data 更新的数据
* @param authority 是否需要验证权限
* @param fn 回调函数
* @return void
* @example ajaxToSave(dom,"/v2/Ajax",type,data,true,function(){})
*/
function ajaxToSave(dom,url,type,data,authority,fn,asynchronous=true){		

	$.ajax({
		type: "POST",
		url: url,
		data:{
			type:type,
			data:JSON.stringify(data),
			authority: JSON.stringify({"authority":authority,"infomation":{"useruuid":$.cookie('USERUUID'),"authorityuuid":$.cookie('SELECTED_AUTHORITY_UUID'),"token":$.cookie('TOKEN')}})
		},
		async:asynchronous,
		beforeSend: function(){
			if(objectIsNullOrEmpty(dom)){
				return;
			}else if(!objectIsNullOrEmpty(dom.blockDom)){
				App.blockUI({
					target: dom.blockDom,
					animate: true
				});
			}else if(!objectIsNullOrEmpty(dom.disabledDom)){
				$(dom.disabledDom).attr('disabled',true);
			}
		},
		complete: function(){
			if(objectIsNullOrEmpty(dom)){			
				return;
			}else if(!objectIsNullOrEmpty(dom.blockDom)){				
				App.unblockUI(dom.blockDom);	
			}else if(!objectIsNullOrEmpty(dom.disabledDom)){
				$(dom.disabledDom).attr('disabled',false);
			}					
		},		
		success:function(response){
			ajaxCallback(response,function(response){		
				fn(response);
			});							
		},			
		error:function(){
			bootbox.alert("请求错误");
		}
	});
}


/**
* 自动计算盘点周期
* @return array
* @example automaticComputingCheckInventoryDate()
*/
function automaticComputingCheckInventoryDateTime(year,month){


	if(month==1){
		prevYear=year-1;
		prevMonth=12;
	}else{
		prevYear=year;
		prevMonth=month-1;
	}

	return [$.myTime.DateToUnix(prevYear+'-'+prevMonth+'-'+'25 0:0:0'),$.myTime.DateToUnix(year+'-'+month+'-'+'24 23:59:59')]
}

/**
* 自动计算盘点周期
* @return array
* @example automaticComputingCheckInventoryDate()
*/
function automaticComputingCheckInventoryDate(){
	var today = new Date();
	var todayDate = today.getDate();
	var currentYear=today.getFullYear();
	var currentMonth=today.getMonth()+1;

	if(todayDate>=1&&todayDate<=24){
		//上月25日数据至本月10日数据
		var prevYear=0,prevMonth=0;
		if(currentMonth==1){
			prevYear=currentYear-1;
			prevMonth=12;
		}else{
			prevYear=currentYear;
			prevMonth=currentMonth-1;
		}
		return [prevYear+'/'+(prevMonth<10?'0':'')+prevMonth+'/'+25,currentYear+'/'+(currentMonth<10?'0':'')+currentMonth+'/'+24];
	}else if(todayDate>=25){
		var nextYear=0,nextMonth=0;
		if(currentMonth==12){
			nextYear=currentYear+1;
			nextMonth=1;
		}else{
			nextYear=currentYear;
			nextMonth=currentMonth+1;
		}			
		return [currentYear+'/'+(currentMonth<10?'0':'')+currentMonth+'/'+25,nextYear+'/'+(nextMonth<10?'0':'')+nextMonth+'/'+24];					   
	}
}

/**
* 自动计算一个月之前的日期
* @return array
* @example automaticComputingPrevMonthDate()
*/
function automaticComputingPrevMonthDate(){

	var today = new Date();
	var todayDate = today.getDate();
	var currentYear=today.getFullYear();
	var currentMonth=today.getMonth()+1;

	if(currentMonth==1){
		prevYear=currentYear-1;
		prevMonth=12;
	}else{
		prevYear=currentYear;
		prevMonth=currentMonth-1;
	}

	return [prevYear+'/'+(prevMonth<10?'0':'')+prevMonth+'/'+todayDate,currentYear+'/'+(currentMonth<10?'0':'')+currentMonth+'/'+todayDate];

}

/**
* 转换null为指定字符串
* @param str 要查询的字符串
* @param value 要变更的字符串
* @return str
* @example changeNull(str)
*/
function changeNull(str,value=''){
	if(str==null){
		return value;
	}
	return str;
}	

/**
* Datatable撑起Rowspan的函数
* @param number rowspan的数量
* @param value td内部的字符串
* @return str
* @example giveParentRowspan(value.purchase_order_number,value.purchase_order_material)
*/
function giveParentRowspan(number,value){
	return '<span class="give-parent-rowspan" rowspan-value="'+number+'">'+value+'</span>';
}

/**
* Datatable撑起Rowspan的函数
* @param number rowspan的数量
* @param value td内部的字符串
* @return str
* @example giveParentRowspan(value.purchase_order_number,value.purchase_order_material)
*/
function giveParentColspan(number,value){
	return '<span class="give-parent-colspan" colspan-value="'+number+'">'+value+'</span>';
}

/**
* Datatable撑起消除父节点的函数
* @return str
* @example giveParentRemove()
*/
function giveParentRemove(){
	return "<span class='remove-parent'></span>";
}

/**
* Datatable撑起消除父节点的函数
* @return str
* @example giveParentBorderRight(parseFloat(value.purchase_order_detail[i].unit_price)*parseFloat(value.purchase_order_detail[i].storage_number))
*/
function giveParentBorderRight(value){
	return '<span class="give-parent-borderright">'+value+"</span>"	  
}	

/**
 * Datatable giveParent相关函数的执行
 * @example giveParentFnRun()
 */
function giveParentFnRun(){
	$(".give-parent-rowspan").each(function(){
		$(this).parent().attr("rowspan",$(this).attr("rowspan-value"));
	});

	$(".give-parent-colspan").each(function(){
		$(this).parent().attr("colspan",$(this).attr("colspan-value"));
	});
	
	$(".remove-parent").each(function(){
		$(this).parent().remove();
	});

	$(".give-parent-borderright").each(function(){
		$(this).parent().addClass("datatable-right-1");
	});
}

/**
 * 给指定html元素一个Block加载的显示效果
 * @example usingBlockUI()
 */
function usingBlockUI(target='.page-content-wrapper',timeout=1000){
	App.blockUI({
		target: target,
		animate: true
	});

	window.setTimeout(function() {
		App.unblockUI(target);
	}, timeout);
}

/**
 * 将指定的Form表单转换为JSon对象格式
 * @example getFormJson($("#data-form"))
 */
function getFormJson(form) {  
	var o = {};  
	var a = $(form).serializeArray();  
	$.each(a, function () {  
		if (o[this.name] !== undefined) {  
			if (!o[this.name].push) {  
				o[this.name] = [o[this.name]];  
			}  
			o[this.name].push(this.value || '');  
		} else {  
			o[this.name] = this.value || '';  
		}  
	});  
	return o;  
} 

/**
 * 将指定的JSon对象填充到Form表单中
 * @example setFormJson(response.data)
 */
/**
 * 将指定的JSon对象填充到Form表单中
 * @example setFormJson(response.data)
 */
function setFormJson(form,obj){
	for(var attr in obj){ 			
		if(typeof(obj[attr])=='function'){					 
			continue;
		}
		if($(form + " input[name='"+attr+"']").length>0){
			var input = $(form + " input[name='"+attr+"']");
			var type = input.attr("type");				
			if(type=="text"){
				input.val(obj[attr]);					
			}else if(type=="radio"){
				input.each(function(){					 
					if($(this).val() == obj[attr]){						
						$(this).attr("checked","checked"); 
					}
				}); 
			}else if(type=="checkbox"){
				input.each(function(){
					var that = $(this);
					$.each(obj[attr], function(n,value){
						if (that.val() == value) {
							that.attr("checked","checked");
						}
					});
				});
			}else if(type=="hidden"){
				input.val(obj[attr]);
				if($(form + " img[name='"+attr+"']").length>0){			
					var img = $(form + " img[name='"+attr+"']");
					img.attr("src",obj[attr]);
				}					
			}
		}else if($(form + " textarea[name='"+attr+"']").length>0){
			var textarea = $(form + " textarea[name='"+attr+"']");
			textarea.html(obj[attr]);
		}else if($(form + " select[name='"+attr+"']").length>0){
			var select = $(form + " select[name='"+attr+"']");
			select.find("option[value='"+obj[attr]+"']").attr("selected",true);
			select.val(obj[attr]).select2();
		}
	}
}

/**
 * 将指定的JSon对象填充到Form表单中
 * @example setFormJson(response.data)
 */
function setFormJsonDyadicArray(form,obj,nameAttr,uuidAttr){
	for(var attr in obj){ 			
		if(typeof(obj[attr])=='function'){					 
			continue;
		}
		if($(form + " input[name='"+nameAttr+"["+obj[uuidAttr]+"]["+attr+"]']").length>0){
			var input = $(form + " input[name='"+nameAttr+"["+obj[uuidAttr]+"]["+attr+"]']");
			var type = input.attr("type");				
			if(type=="text"){
				input.val(obj[attr]);					
			}else if(type=="radio"){
				input.each(function(){					 
					if($(this).val() == obj[attr]){						
						$(this).attr("checked","checked"); 
					}
				}); 
			}else if(type=="checkbox"){
				if(obj[attr]=='1'){
					input.attr('checked',true) 
				}else{
					input.removeAttr("checked")
				}	
			}else if(type=="hidden"){
				input.val(obj[attr]);
				if($(form + " img[name='"+attr+"']").length>0){			
					var img = $(form + " img[name='"+attr+"']");
					img.attr("src",obj[attr]);
				}					
			}
		}else if($(form + " textarea[name='"+nameAttr+"["+obj[uuidAttr]+"]["+attr+"]']").length>0){
			var textarea = $(form + " textarea[name='"+nameAttr+"["+obj[uuidAttr]+"]["+attr+"]']");
			textarea.html(obj[attr]);
		}else if($(form + " select[name='"+nameAttr+"["+obj[uuidAttr]+"]["+attr+"]']").length>0){
			var select = $(form + " select[name='"+nameAttr+"["+obj[uuidAttr]+"]["+attr+"]']");
			select.find("option[value='"+obj[attr]+"']").attr("selected",true);
		}
	}
}

/**
 * 设置停用、删除按钮点击
 * @example updateItemTinyField("/v2/Ajax",'#sample_1')
 */
function updateItemTinyField(apiPath,tableName){
	$(document).ready(function() {

		$(document).on('click','.update-item',function(){

			var that = $(this);
			var dataField = that.attr('data-field');

			if(typeof dataField !== typeof undefined){				

				if(dataField==="is-disabled" || dataField==="is-stop"){

					bootbox.confirm("确定"+(that.attr('data-value')=='1'?"启用?":"停用?"), function(result) {
						if(result){
							
							var data;

							if (dataField === "is-disabled") {
								data = {"is_disabled":that.attr('data-value')==1?0:1};
							} else if (dataField === "is-stop") {
								data = {"is_stop":that.attr('data-value')==1?0:1};
							}
							
							ajaxToUpdate(that,apiPath+'/'+that.attr('data-uuid'),null,data,true,function(response){

								if(that.attr('data-value')=='1'){
									that.html('停用');that.attr('data-value','0');that.parent().prev().html('正在启用');
								}else if(that.attr('data-value')=='0'){
									that.html('启用');that.attr('data-value','1');that.parent().prev().html('已停用');
								}else{
									bootbox.alert('错误的"data-value"');
								}

							});
						}
					});						
		
				}else if(that.attr('data-field')==="is-hidden"){

					bootbox.confirm("确定删除?", function(result) {

						if(result){

							var data = {"is_hidden":"1"};
							ajaxToUpdate(that,apiPath+'/'+that.attr('data-uuid'),null,data,true,function(response){

					            bootbox.alert("删除成功",function(){
					                var table = $(tableName).DataTable();							
									table.row(that.closest('tr')).remove().draw();
					            });

							})				
							
						}
					});	

				}else if(that.attr('data-field')==="is-display"){


					bootbox.confirm("确定"+(that.attr('data-value')=='1'?"关闭显示?":"开启显示?"), function(result) {

						if(result){

							var data = {"is_display":that.attr('data-value')==1?0:1};

							ajaxToUpdate(that,apiPath+'/'+that.attr('data-uuid'),null,data,true,function(response){

					            bootbox.alert((that.attr('data-value')=='1'?"关闭显示":"开启显示")+"成功",function(){
					                if(that.attr('data-value')=='1'){
										that.html('开启显示');that.attr('data-value','0');
									}else if(that.attr('data-value')=='0'){
										that.html('关闭显示');that.attr('data-value','1');
									}else{
										bootbox.alert('错误的"data-value"');
									}
					            });

							})				
						}

					});

				}else{
					bootbox.alert('错误的"data-field"');
				}
			}
		});
	});
}
/**
	* jquery 时间戳与日期转换
	* @example $.myTime.DateToUnix('2014-5-15 20:20:20')
	* @example $.myTime.UnixToDate(1325347200)
	*/


(function($) {
    $.extend({
        myTime: {
            /**
             * 当前时间戳
             * @return <int>        unix时间戳(秒)  
             */
            CurTime: function(){
                return Date.parse(new Date())/1000;
            },
            /**              
             * 日期 转换为 Unix时间戳
             * @param <string> 2014-01-01 20:20:20  日期格式              
             * @return <int>        unix时间戳(秒)              
             */
            DateToUnix: function(string) {
                var f = string.split(' ', 2);
                var d = (f[0] ? f[0] : '').split('-', 3);
                var t = (f[1] ? f[1] : '').split(':', 3);
                return (new Date(
                        parseInt(d[0], 10) || null,
                        (parseInt(d[1], 10) || 1) - 1,
                        parseInt(d[2], 10) || null,
                        parseInt(t[0], 10) || null,
                        parseInt(t[1], 10) || null,
                        parseInt(t[2], 10) || null
                        )).getTime() / 1000;
            },
            /**              
             * 时间戳转换日期              
             * @param <int> unixTime    待时间戳(秒)              
             * @param <bool> isFull    返回完整时间(Y-m-d 或者 Y-m-d H:i:s)              
             * @param <int>  timeZone   时区              
             */
            UnixToDate: function(unixTime, isFull, timeZone) {
                if (typeof (timeZone) == 'number')
                {
                    unixTime = parseInt(unixTime) + parseInt(timeZone) * 60 * 60;
                }
                var time = new Date(unixTime * 1000);
                var ymdhis = "";
                ymdhis += time.getUTCFullYear() + "-";
                ymdhis += ((time.getUTCMonth()+1)>9?(time.getUTCMonth()+1):'0'+(time.getUTCMonth()+1)) + "-";
                ymdhis += (time.getUTCDate()>9?(time.getUTCDate()):'0'+time.getUTCDate());
                if (isFull === true)
                {
                    ymdhis += " " + (time.getUTCHours()>9?(time.getUTCHours()):'0'+time.getUTCHours()) + ":";
                    ymdhis += (time.getUTCMinutes()>9?(time.getUTCMinutes()):'0'+time.getUTCMinutes()) + ":";
                    ymdhis += (time.getUTCSeconds()>9?(time.getUTCSeconds()):'0'+time.getUTCSeconds());
                }
                return ymdhis;
            }
        }
    });
})(jQuery);


	/**
	* 对Date的扩展，将 Date 转化为指定格式的String
	* 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， 
	* 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) 
	* @example (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423 
	* @example (new Date()).Format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18 
	*/


	Date.prototype.Format = function (fmt) { //author: meizz 
	    var o = {
	        "M+": this.getMonth() + 1, //月份 
	        "d+": this.getDate(), //日 
	        "h+": this.getHours(), //小时 
	        "m+": this.getMinutes(), //分 
	        "s+": this.getSeconds(), //秒 
	        "q+": Math.floor((this.getMonth() + 3) / 3), //季度 
	        "S": this.getMilliseconds() //毫秒 
	    };
	    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	    for (var k in o)
	    if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
	    return fmt;
	}

	/**
	* 返回类似于"2018/06/15"的补充0后的年月日格式
	* @example getYearMonthDate(new Date())
	*/

    function getYearMonthDate(date){
        return date.getFullYear()+'/'+(date.getMonth()+1<10?'0':'')+(date.getMonth()+1)+'/'+(date.getDate()<10?'0':'')+date.getDate()
    }

	/**
	* 获取指定区间范围随机数，包括lowerValue和upperValue
	* @example randomFrom(100000000,999999999)
	*/
	function randomFrom(lowerValue,upperValue)
	{
	    return Math.floor(Math.random() * (upperValue - lowerValue + 1) + lowerValue);
	}


	/**
	* 获取url链接中指定参数的"key=value"的起始位置和结束位置
	* @example getUrlParamIndexArray(window.location.href,"purchaseOrderUUID")
	*/
	function getUrlParamIndexArray(href,str){

        var startIndex = href.indexOf(str)
        if(startIndex>0){
            
            var endIndex = href.indexOf("&",startIndex);

            if(endIndex==-1){
                endIndex =  href.length;
            }

            return [startIndex,endIndex]

        }else{

            return [-1,-1]
            
        }
    
    }

	/**
	* 置空url链接中指定参数的"key=value"字符串
	* @example filtPurchaseOrderUUID(window.location.href,"purchaseOrderUUID")
	*/
    function filtUrlParam(href,str){

        var indexArray = getUrlParamIndexArray(href,str);

        if(href.substring(indexArray[1],indexArray[1]+1)=='&'){

            return href.replace(href.substring(indexArray[0],indexArray[1]+1),"");
        }else{

            return href.replace(href.substring(indexArray[0]-1,indexArray[1]),"");
        } 

    }

	/**
	* 将指定name的html dom控件设置为只读
	* @example setControlsReadOnlyByName(value.uuid)
	*/

    function setControlsReadOnlyByName(str){

        $.each($("[name*='"+str+"']"),function(){
            var tagName = $(this)[0].tagName; 

            if(tagName=="INPUT"||tagName=="TEXTAREA"){


                $(this).attr("readonly","readonly");
                if($(this).hasClass("date-picker")){
                    $(this).removeClass("date-picker");
                }
                if($(this).hasClass("form_datetime")){
                    $(this).removeClass("form_datetime");
                }
                var type = $(this).attr("type");
                if(type="checkbox"){
                    $(this).attr("onclick","return false");
                }

            }else if(tagName=="SELECT"){
                $(this).attr("readonly","readonly");
            }

        })

            
    }

	/**
	* 扩展了JQuery的serializeArray()函数
	* @example $("#input-form").serializeExpand();
	*/

    $.fn.serializeExpand = function () {
        var a = this.serializeArray();
        var $radio = $('input[type=radio],input[type=checkbox]', this);
        var temp = {};
        $.each($radio, function () {
            if (!temp.hasOwnProperty(this.name)) {
                if ($("input[name='" + this.name + "']:checked").length == 0) {
                    temp[this.name] = "";
                    a.push({name: this.name, value: "0"});
                }else{
                    var that =this;
                    $.each(a,function(n,value){                        
                        if(value.name==that.name){
                            value.value = "1";
                        }
                    })

                }
            }
        });
        return jQuery.param(a);
    };

	/**
	* 根据期望和实际值，判断是否添加font-red变红的函数
	* @example changeFontColor(value.submit_status,"cancel",value.product_name);
	*/
    function changeFontColor(expectation,result,value){
        
        if(expectation==result){
            value = '<span class="font-red">'+value+'</span>';
        }

        return value;        
    }    

	/**
	* 去除HTML标签
	* @example removeHTMLTag(value.submit_status);
	*/
	function removeHTMLTag(str) {
	    str = str.replace(/<\/?[^>]*>/g, ''); //去除HTML tag
	    str = str.replace(/[ | ]*\n/g, '\n'); //去除行尾空白
	    //str = str.replace(/\n[\s| | ]*\r/g,'\n'); //去除多余空行
	    str = str.replace(/ /ig, ''); //去掉 
	    return str;
	}

	/**
	* 将URL参数转变为Json对象
	* @example removeHTMLTag(value.submit_status);
	*/
	function changeUrlParameterToJson(str) {
	    let arr = str.split("&");   //先通过？分解得到？后面的所需字符串，再将其通过&分解开存放在数组里
		let obj = {};
		for (let i of arr) {
		  obj[i.split("=")[0]] = i.split("=")[1];  //对数组每项用=分解开，=前为对象属性名，=后为属性值
		}
		return obj;
	}
